//!
//! Used to generate the template benchmark files for all problems
//! up to now.

use std::{
    fs::{self, File},
    io::Write,
    path::Path,
};

const LEVELS: [&str; 3] = ["easy", "medium", "hard"];

fn main() -> std::io::Result<()> {
    let benches_dir = Path::new("benches");
    let criterion_main_path = benches_dir.join("criterion_main.rs");

    if !benches_dir.exists() {
        fs::create_dir_all(benches_dir)?;
    }

    let mut bench_entries = Vec::new();

    for level in LEVELS {
        let src_level_dir = Path::new("src").join(level);

        for entry in fs::read_dir(&src_level_dir)? {
            let entry = entry?;
            let path = entry.path();

            if path.extension().and_then(|s| s.to_str()) != Some("rs") {
                continue;
            }

            if path.file_name().unwrap() == "mod.rs" {
                continue;
            }

            let stem = path.file_stem().unwrap().to_str().unwrap(); // e.g. "_025"
            let module_name = stem;
            let bench_file_name = format!("bench{}.rs", stem);
            let bench_filepath = benches_dir.join(&bench_file_name);
            let bench_module_name = format!("bench_{}", stem.trim_start_matches('_'));
            let group_name = format!("group_{}_{}", level, stem.trim_start_matches('_'));

            // Write benchmark file if it doesn't exist
            if !bench_filepath.exists() {
                let mut file = File::create(&bench_filepath)?;
                writeln!(
                    file,
                    r#"use criterion::{{black_box, criterion_group, criterion_main, Criterion}};
use leetcode::{level}::{module_name}::Solution;

pub fn benchmark(c: &mut Criterion) {{
    c.bench_function("{module_name}", |b| {{
        b.iter(|| {{
            todo!();
        }});
    }});
}}

criterion_group!({group_name}, benchmark);
criterion_main!({group_name});
"#,
                    level = level,
                    module_name = module_name,
                    group_name = group_name
                )?;
                println!("Generated benchmark: benches/{}", bench_file_name);
            } else {
                println!("Skipped existing benchmark: benches/{}", bench_file_name);
            }

            bench_entries.push((bench_module_name, group_name));
        }
    }

    // Write benches/criterion_main.rs
    let mut main_file = File::create(&criterion_main_path)?;
    writeln!(main_file, "// Auto-generated by generate_benchmarks.rs")?;
    writeln!(main_file, "use criterion::criterion_main;")?;

    for (bench_mod, _) in &bench_entries {
        writeln!(main_file, "mod {};", bench_mod)?;
    }

    let group_list = bench_entries
        .iter()
        .map(|(bench_mod, group)| format!("{}::{}", bench_mod, group))
        .collect::<Vec<_>>()
        .join(", ");

    writeln!(main_file, "criterion_main!({});", group_list)?;
    println!("Generated benches/criterion_main.rs");

    Ok(())
}
